#!/usr/bin/env python3

import argparse
import logging

import os
import shlex
import subprocess
import shutil

from enum import Enum
from typing import List


def create_symlink(src: str, dst: str):
    if not os.path.exists(dst):
        os.symlink(src, dst)


def shell(command: str, verbose=False) -> int:
    """ Run a shell command

    Returns with the code returned by the process
    """

    if verbose:
        print(command)

    result = subprocess.run(shlex.split(command))
    return result.returncode


def configure(project: str,
              build_dir: str,
              build_type: str,
              generator: str,
              sanitizer: str,
              verbose: bool,
              forward_args: List[str] =None,
              **kwargs):
    """ Configure a CMake a project

    project: full path to the project
    """

    cmake_cmd = " ".join([
        f"cmake -S {project} -B {build_dir}",
        f"-DCMAKE_BUILD_TYPE={build_type}",
        "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON",
        f"-G{generator}"
    ])

    if sanitizer != "nosan":
        cmake_cmd += f" -DSANITIZERS={sanitizer}"

    if forward_args is not None:
        cmake_cmd += f" {' '.join(forward_args)}"

    shell(cmake_cmd, verbose=verbose)


def build(build_dir: str,
          target: str,
          jobs: int,
          verbose: bool):
    """ Build a configured CMake project """

    shell(f"cmake --build {build_dir} --target {target} -- -j{jobs}", verbose=verbose)


def find_file(target: str, where: str) -> str:
    # TODO: check for multiple finds
    for root, dir, files in os.walk(where):
        if target in files:
            return os.path.join(root, target)


def run(build_dir: str, target: str, args: List[str], gdb: bool):
    exe = find_file(target, build_dir)
    print("Running executable: ", end="")

    if not gdb:
        retcode = shell(" ".join([exe, "".join(args)]), verbose=True)
        print(f"Executable returned with {retcode}")
    else:
        shell(" ".join(["gdb", "--args", exe, "".join(args)]), verbose=True)

    return


def create_build_path(project: str, build_type: str, compiler: str, sanitizer: str) -> str:
    if sanitizer == "nosan":
        san = ""
    else:
        san = f"-{sanitizer}"

    return os.path.join(
        os.path.realpath(project),
        "build",
        f"{build_type.lower()}-{os.path.basename(compiler)}{san}"
    )

def create_compile_cmd_symlink(src: str, dst: str):
    create_symlink(
        os.path.join(src, "compile_commands.json"),
        os.path.join(dst, "compile_commands.json")
    )

def parse_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument("-b", "--build-type", default="Debug")
    parser.add_argument("-d", "--delete", action="store_true", help="Clean build")
    parser.add_argument("-g", "--generator", default="'Unix Makefiles'", choices=["'Unix Makefiles'", "Ninja"])
    parser.add_argument("-j", "--jobs", default=1)
    parser.add_argument("-p", "--project", required=True)
    parser.add_argument("-s", "--sanitizer", default="nosan", choices=["asan", "tsan"])
    parser.add_argument("-t", "--target", default="all")
    parser.add_argument("-r", "--run", action="store_true")
    parser.add_argument(      "--args", dest="executable_args", nargs="+", default="")
    parser.add_argument(      "--gdb", action="store_true")
    parser.add_argument("-v", "--verbose", action="store_true")

    subparsers = parser.add_subparsers()
    parser_fwd = subparsers.add_parser("--", prefix_chars="+")
    parser_fwd.add_argument("forward_args", nargs="*")

    return parser.parse_args()


def checks():
    if os.getenv("CC") == "" or os.getenv("CXX") == "":
        raise Exception("Compiler environment variables are not defined (CC and/or CXX)!")


def main():
    args = parse_arguments()
    checks()

    build_dir = create_build_path(args.project, args.build_type, os.getenv("CXX"), args.sanitizer)

    if args.delete:
        if input(f"Are you sure to remove `{build_dir}` (press 'y' to proceed): ") == "y":
            shutil.rmtree(build_dir)

    configure(build_dir=build_dir, **vars(args))
    create_compile_cmd_symlink(build_dir, args.project)
    build(build_dir, args.target, args.jobs, args.verbose)
    run(build_dir, args.target, args.executable_args, args.gdb)


if __name__ == "__main__":
    main()
