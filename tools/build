#!/bin/zsh

function usage() {
    cat << EOF
usage: ${1##*/} -p | --path <REPO PATH> [OPTIONS...]

    -p | --path <REPO PATH>                 Path to the repository

Optional parameters:
    -b | --build_type <BUILD TYPE>          Type of the build e.g. Debug, Release
    -c | --compiler <COMPILER NAME>         Compiler used by CMake
    -d | --delete                           Make a clean build
    -h | --help                             Print help
    -j | --jobs <N>                         Number of parallel jobs
    -l | --list                             List XBUILD environment variables
    -r | --run                              Finds the executable in the build dir and runs it
    -t | --target <TARGET NAME>             Target to build
    -v | --compiler-ver                     Compiler version
         --args <"arg1, arg2, ...">         Arguments to the executed binary (in quotes)
         --gdb                              Run in gdb
         --                                 Forwarding arguments to CMake
EOF
}

function list() {
    echo "Default build settings"
    echo ""
    echo "XBUILD_TYPE   = ${XBUILD_TYPE}"
    echo "XBUILD_GEN    = ${XBUILD_GEN}"
    echo "XBUILD_JOBS   = ${XBUILD_JOBS}"
    echo "XCOMPILER     = ${XCOMPILER}"
    echo "XCOMPILER_VER = ${XCOMPILER_VER}"
}

NONE="<none>"
FWD_ARGS="${NONE}"

while [[ $# -gt 0 ]]; do
    if [[ "${FWD_ARGS}" == "${NONE}" ]]; then
        case $1 in
            -b | --build_type)      BUILD_TYPE="$2";    shift; shift ;;
            -c | --compiler)        COMPILER="$2";      shift; shift ;;
            -d | --delete)          DELETE=1;           shift ;;
            -j | --jobs)            JOBS="$2";          shift; shift ;;
            -l | --list)            list; exit 0;       shift ;;
            -p | --path)            PATH_REPO="$2";     shift; shift ;;
            -r | --run)             RUN=1;              shift ;;
            -t | --target)          TARGET="$2";        shift; shift ;;
            -v | --compiler-ver)    COMPILER_VER="$2";  shift; shift ;;
                 --args)            BINARY_ARGS="$2";   shift; shift ;;
                 --gdb)             GDB=1;              shift;;
            --)                     FWD_ARGS="";        shift ;;
            -h | --help)            usage ${0##*/};     exit 0; shift ;;
            *)                      usage; exit 255;    shift ;;
        esac
    else
        FWD_ARGS="${FWD_ARGS}$1 "
        shift
    fi
done

# -------------------------------------==[ Initializing ]==-----------------------------------------

# Error checking
if [[ -z "${PATH_REPO}" ]]; then
    echo "No path to the repository provided."
    echo "Don't know what to build!"
    exit 1
fi

BUILD_TYPE="${BUILD_TYPE-$XBUILD_TYPE}"
if [[ -z "${BUILD_TYPE}" ]]; then
    echo "No build type specified"
    exit 2
fi

# Setting default values
if [[ -z "${COMPILER}" ]]; then
    COMPILER="${XCOMPILER}"
    COMPILER_VER="${XCOMPILER_VER}"
fi

GENERATOR="${XBUILD_GEN-"Unix Makefiles"}"
TARGET="${TARGET-"all"}"

if [[ -z "${JOBS}" ]]; then
    JOBS="${XBUILD_JOBS-1}"
fi

# Setting up compilers
if [[ -z "${COMPILER_VER}" ]]; then
    if [[ "${COMPILER}" == "gcc" ]]; then
        COMPILER_C="gcc"
        COMPILER_CXX="g++"
    elif [[ "${COMPILER}" == "clang" ]]; then
        COMPILER_C="clang"
        COMPILER_CXX="clang++"
    fi
else
    if [[ "${COMPILER}" == "gcc" ]]; then
        COMPILER_C="gcc-${COMPILER_VER}"
        COMPILER_CXX="g++-${COMPILER_VER}"
    elif [[ "${COMPILER}" == "clang" ]]; then
        COMPILER_C="clang-${COMPILER_VER}"
        COMPILER_CXX="clang++-${COMPILER_VER}"
    fi
fi

# Checking build file according to the provided generator
if [[ "${GENERATOR}" == "Ninja" ]]; then
    BUILD_FILE="build.ninja"
elif [[ "${GENERATOR}" == "Unix Makefiles" ]]; then
    BUILD_FILE="Makefile"
fi


BUILD_DIR="${PATH_REPO}/build/${BUILD_TYPE:l}-${COMPILER}${COMPILER_VER}"

if [[ -n "${DELETE}" ]]; then
    echo "Removing ${BUILD_DIR}"
    rm -rfI "${BUILD_DIR}"
fi

mkdir -p "${BUILD_DIR}"

if [[ "${FWD_ARGS}" == "${NONE}" ]]; then
    FWD_ARGS=""
fi

# -----------------------------------------==[ MAIN ]==---------------------------------------------

# Generate build files if hasn't been already
if [[ ! -e "${BUILD_DIR}/${BUILD_FILE}" ]]; then
    (cd "${BUILD_DIR}" &&
    cmake "${FWD_ARGS}" \
          -DCMAKE_BUILD_TYPE="${BUILD_TYPE}" \
          -DCMAKE_C_COMPILER="${COMPILER_C}" \
          -DCMAKE_CXX_COMPILER="${COMPILER_CXX}" \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
          -G"${GENERATOR}" \
          "${PATH_REPO}"
    )
fi

# Build
cmake --build "${BUILD_DIR}" \
      --target "${TARGET}" \
      -- -j"${JOBS}"

if [[ $? != 0 ]]; then
    echo -e "${COLOR_RED}  ----==[ BUILD FAILED ! ]==----"
    return 2
fi

# Link compile_commands.json to the root of the repo
if [[ ! -e "${PATH_REPO}/compile_commands.json" ]]; then
    ln -sv "${BUILD_DIR}/compile_commands.json" \
        "${PATH_REPO}/compile_commands.json"
fi

# Run executable
if [[ -n "${RUN}" ]]; then
    PATH_BIN=$(find "${BUILD_DIR}" -name "${TARGET}")
    echo "Executable found at: ${PATH_EXE}"
    if [[ -n "${GDB}" ]]; then
        gdb --args "${PATH_BIN}" ${(z)BINARY_ARGS}
    else
        "${PATH_BIN}" ${(z)BINARY_ARGS}
    fi
fi
